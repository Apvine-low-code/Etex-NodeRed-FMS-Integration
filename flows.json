[
    {
        "id": "663405f12566bce6",
        "type": "tab",
        "label": "FMS Integration",
        "disabled": false,
        "info": "",
        "env": [
            {
                "name": "FolderToWatch",
                "value": "C:\\test",
                "type": "str"
            }
        ]
    },
    {
        "id": "b9112020394e29d0",
        "type": "subflow",
        "name": "ProcessFileContentStopMessage",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 100,
                "y": 200,
                "wires": [
                    {
                        "id": "ce132316af8a6d68"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 880,
                "y": 200,
                "wires": [
                    {
                        "id": "8a3c5fc546c5fe84",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "5a098ffd973c7269",
        "type": "subflow",
        "name": "SendMessage",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 160,
                "y": 280,
                "wires": [
                    {
                        "id": "4cfe62c98222f2ec"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 560,
                "y": 280,
                "wires": [
                    {
                        "id": "5a098ffd973c7269",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "e2df9081b54634df",
        "type": "group",
        "z": "663405f12566bce6",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "831d3ffb7aab030b",
            "c2b0fd2a3699ada7",
            "460a4e561498714f",
            "99d13c2caaf80ea1",
            "d4986ed2c9343b02",
            "64405a5328ca5afd",
            "dad6b43f6743ae15",
            "1fcaae4c799b6ec1",
            "a2efd4a00ee38fb5",
            "a42f67315426e688",
            "4ad5f1d34f19f9f3",
            "f6156060b121eca2",
            "c0e9094cb50d99a7",
            "723924c63e65e76a",
            "3b3376bf5bfb8ff9"
        ],
        "x": 94,
        "y": 499,
        "w": 2042,
        "h": 202
    },
    {
        "id": "de0617ba6b2d0a63",
        "type": "group",
        "z": "663405f12566bce6",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "95ed601e9b7582a4",
            "4447b76fbc16edc7",
            "61367d0d269217f8",
            "31b930d30898aa25",
            "2bd6924622e32179"
        ],
        "x": 94,
        "y": 339,
        "w": 812,
        "h": 142
    },
    {
        "id": "87236d5bcabd69a0",
        "type": "group",
        "z": "663405f12566bce6",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "727a7b74b2a235b6",
            "ec6410c418d8cbdc",
            "3347a719b4a044bc",
            "42e394c88481172f",
            "3faec9f706e79632",
            "d59b117eadf95155"
        ],
        "x": 94,
        "y": 79,
        "w": 732,
        "h": 242
    },
    {
        "id": "f418b45e46968f29",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": false,
        "alpnprotocol": ""
    },
    {
        "id": "71a232d8dcd5696c",
        "type": "mqtt-broker",
        "name": "IoTHub",
        "broker": "ssl://WE-HUB-P-IOT.azure-devices.net",
        "port": "443",
        "tls": "f418b45e46968f29",
        "clientid": "ESELP1-IOTEDGE02PTEST",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "ce132316af8a6d68",
        "type": "function",
        "z": "b9112020394e29d0",
        "name": "MapMessages",
        "func": "// File contains multiple lines like this:\n// M4  ,25/09/2024,03:13:18,25/09/2024,03:16:19,***\n// fields are: machine code, start date, start time, end date, end time, reason code\nconst formatDate = global.get(\"formatDate\"); // see 'on-start' tab\nconst lines = msg.payload.split(/\\r?\\n/);\n\nmsg.messages = [];\n\nlines.forEach((line)=>{\n    if(! line) return;\n    \n    const fields = line.split(\",\");\n    let startTime = formatDate(fields[1] + fields[2]);\n    let endTime = formatDate(fields[3] + fields[4]);\n\n    msg.messages.push({\n        \"messageType\": \"create_update_downtime\",\n        \"parameters\": [\n            {\n                \"attribute\": \"workcenterid\",\n                \"value\": msg.plant + fields[0].trim()\n            },\n            {\n                \"attribute\": \"startTime\",\n                \"value\": startTime\n            },\n            {\n                \"attribute\": \"endTime\",\n                \"value\": endTime\n            }\n        ]\n    });\n})\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n\n// input in format dd/MM/yyyyHH:mm:ss\nconst formatDate = function(dateString){\n    const day = dateString.substring(0, 2);\n    const month = dateString.substring(3, 5);\n    const year = dateString.substring(6, 10);\n    const hour = dateString.substring(10, 12);\n    const minutes = dateString.substring(13, 15);\n    const seconds = dateString.substring(16, 18);\n\n    // We don't convert through a data object because we don't want any\n    // timezone to be added. This node-red instance will process files from\n    // different locations around the world. We need to send the date to Mendix\n    // in the local time zone where the downtime occured (as written in the txt file)\n\n    // output in format yyyy-MM-ddTHH:mm:ss\n    return year + '-' + month + '-' + day + 'T' + hour + ':' + minutes + ':' + seconds;\n}\n\nglobal.set(\"formatDate\", formatDate);",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 200,
        "wires": [
            [
                "8a3c5fc546c5fe84"
            ]
        ]
    },
    {
        "id": "8a3c5fc546c5fe84",
        "type": "loop",
        "z": "b9112020394e29d0",
        "name": "for each message",
        "kind": "enum",
        "count": "",
        "initial": "1",
        "step": "1",
        "condition": "",
        "conditionType": "js",
        "when": "before",
        "enumeration": "messages",
        "enumerationType": "msg",
        "limit": "",
        "loopPayload": "loop-val",
        "finalPayload": "final-orig",
        "x": 530,
        "y": 200,
        "wires": [
            [],
            [
                "5c2a44289ea51b7e"
            ]
        ]
    },
    {
        "id": "5c2a44289ea51b7e",
        "type": "change",
        "z": "b9112020394e29d0",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "message",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 430,
        "y": 300,
        "wires": [
            [
                "717b295dc23fb14a"
            ]
        ]
    },
    {
        "id": "717b295dc23fb14a",
        "type": "subflow:5a098ffd973c7269",
        "z": "b9112020394e29d0",
        "name": "",
        "x": 660,
        "y": 300,
        "wires": [
            [
                "8a3c5fc546c5fe84"
            ]
        ]
    },
    {
        "id": "979953ca28e71528",
        "type": "loop",
        "z": "b9112020394e29d0",
        "name": "",
        "kind": "enum",
        "count": "",
        "initial": "1",
        "step": "1",
        "condition": "",
        "conditionType": "js",
        "when": "before",
        "enumeration": "messages",
        "enumerationType": "msg",
        "limit": "",
        "loopPayload": "loop-val",
        "finalPayload": "final-count",
        "x": 270,
        "y": 600,
        "wires": [
            [],
            [
                "e0cb229e44e3c66f"
            ]
        ]
    },
    {
        "id": "e0cb229e44e3c66f",
        "type": "function",
        "z": "b9112020394e29d0",
        "name": "function 1",
        "func": "let iotMessage = \nBuffer.from(JSON.stringify(msg.payload)).toString('base64');\n\nmsg.payload = {\n\t\"id\": \"859d19e9-6fb2-a915-4466-3c84f94b12d7\",\n\t\"source\": \"/SUBSCRIPTIONS/3F7D5CC5-D591-43C5-9D67-D2725DD0196D/RESOURCEGROUPS/WE-HUB-OT-FRVSL01-T-RG/PROVIDERS/MICROSOFT.DEVICES/IOTHUBS/WE-HUB-FRVSL01-T-IOT\",\n\t\"specversion\": \"1.0\",\n\t\"type\": \"Microsoft.Devices.DeviceTelemetry\",\n\t\"subject\": \"devices/FRVLS1-IOTEDGE201T/TelemetryCollectionModule\",\n\t\"time\": \"2022-10-20T11:04:09.614Z\",\n\t\"data\": {\n\t\t\"properties\": {},\n\t\t\"systemProperties\": {\n\t\t\t\"iothub-connection-device-id\": \"FRVLS1-IOTEDGE201T\",\n\t\t\t\"iothub-connection-module-id\": \"TelemetryCollectionModule\",\n\t\t\t\"iothub-connection-auth-method\": \"{\\\"scope\\\":\\\"module\\\",\\\"type\\\":\\\"sas\\\",\\\"issuer\\\":\\\"iothub\\\",\\\"acceptingIpFilterRule\\\":null}\",\n\t\t\t\"iothub-connection-auth-generation-id\": \"638007332889069917\",\n\t\t\t\"iothub-enqueuedtime\": \"2022-10-20T11:04:09.6140000Z\",\n\t\t\t\"iothub-message-source\": \"Telemetry\"\n\t\t},\n\t\t\"body\": iotMessage\n\t}\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 720,
        "wires": [
            [
                "1c0af6548ee20abc"
            ]
        ]
    },
    {
        "id": "1c0af6548ee20abc",
        "type": "http request",
        "z": "b9112020394e29d0",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:8080/rest/shopfloordata/v1/azuremessage",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "x-api-key",
                "valueType": "other",
                "valueValue": "TestTest123"
            }
        ],
        "x": 350,
        "y": 720,
        "wires": [
            [
                "979953ca28e71528"
            ]
        ]
    },
    {
        "id": "348735635f2198a1",
        "type": "comment",
        "z": "b9112020394e29d0",
        "name": "local test to send to mendix directly",
        "info": "",
        "x": 240,
        "y": 540,
        "wires": []
    },
    {
        "id": "899a24a304ea40ce",
        "type": "debug",
        "z": "5a098ffd973c7269",
        "name": "LogValue",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 340,
        "wires": []
    },
    {
        "id": "4cfe62c98222f2ec",
        "type": "change",
        "z": "5a098ffd973c7269",
        "name": "Set payload",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "message",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 310,
        "y": 340,
        "wires": [
            [
                "899a24a304ea40ce",
                "1d25a282a8bb3877"
            ]
        ]
    },
    {
        "id": "a477f0da13e3d992",
        "type": "mqtt out",
        "z": "5a098ffd973c7269",
        "name": "",
        "topic": "devices/ESELP1-IOTEDGE02P/messages/events/",
        "qos": "1",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "71a232d8dcd5696c",
        "x": 1030,
        "y": 500,
        "wires": []
    },
    {
        "id": "1d25a282a8bb3877",
        "type": "q-gate",
        "z": "5a098ffd973c7269",
        "name": "",
        "controlTopic": "control",
        "defaultState": "open",
        "openCmd": "open",
        "closeCmd": "close",
        "toggleCmd": "toggle",
        "queueCmd": "queue",
        "defaultCmd": "default",
        "triggerCmd": "trigger",
        "flushCmd": "flush",
        "resetCmd": "reset",
        "peekCmd": "peek",
        "dropCmd": "drop",
        "statusCmd": "status",
        "maxQueueLength": "0",
        "keepNewest": false,
        "qToggle": false,
        "persist": true,
        "storeName": "default",
        "x": 690,
        "y": 500,
        "wires": [
            [
                "a477f0da13e3d992"
            ]
        ]
    },
    {
        "id": "e097997bbf128185",
        "type": "change",
        "z": "5a098ffd973c7269",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "control",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "open",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 460,
        "y": 500,
        "wires": [
            [
                "1d25a282a8bb3877"
            ]
        ]
    },
    {
        "id": "329773ef7697f870",
        "type": "status",
        "z": "5a098ffd973c7269",
        "name": "",
        "scope": [
            "a477f0da13e3d992"
        ],
        "x": 160,
        "y": 520,
        "wires": [
            [
                "8ed466bc9c0249f3"
            ]
        ]
    },
    {
        "id": "8ed466bc9c0249f3",
        "type": "switch",
        "z": "5a098ffd973c7269",
        "name": "",
        "property": "status.text",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "node-red:common.status.connected",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "node-red:common.status.connected",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 310,
        "y": 520,
        "wires": [
            [
                "e097997bbf128185"
            ],
            [
                "bc088282b872c15f"
            ]
        ]
    },
    {
        "id": "bc088282b872c15f",
        "type": "change",
        "z": "5a098ffd973c7269",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "control",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "queue",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 460,
        "y": 540,
        "wires": [
            [
                "1d25a282a8bb3877"
            ]
        ]
    },
    {
        "id": "831d3ffb7aab030b",
        "type": "link in",
        "z": "663405f12566bce6",
        "g": "e2df9081b54634df",
        "name": "ProcessFile",
        "links": [],
        "x": 135,
        "y": 600,
        "wires": [
            [
                "99d13c2caaf80ea1"
            ]
        ]
    },
    {
        "id": "c2b0fd2a3699ada7",
        "type": "file",
        "z": "663405f12566bce6",
        "g": "e2df9081b54634df",
        "name": "delete file",
        "filename": "newFileName",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "delete",
        "encoding": "none",
        "x": 1980,
        "y": 600,
        "wires": [
            [
                "64405a5328ca5afd"
            ]
        ]
    },
    {
        "id": "460a4e561498714f",
        "type": "function",
        "z": "663405f12566bce6",
        "g": "e2df9081b54634df",
        "name": "rename .dat to .wip",
        "func": "msg.newFileName = msg.filename.replaceAll('.dat', '.wip');\n\nfs.renameSync(msg.filename, msg.newFileName);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "fs",
                "module": "fs"
            }
        ],
        "x": 990,
        "y": 600,
        "wires": [
            [
                "d4986ed2c9343b02"
            ]
        ]
    },
    {
        "id": "99d13c2caaf80ea1",
        "type": "switch",
        "z": "663405f12566bce6",
        "g": "e2df9081b54634df",
        "name": "is .dat file?",
        "property": "filename",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": ".dat",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 250,
        "y": 600,
        "wires": [
            [
                "4ad5f1d34f19f9f3"
            ],
            [
                "c0e9094cb50d99a7"
            ]
        ]
    },
    {
        "id": "d4986ed2c9343b02",
        "type": "file in",
        "z": "663405f12566bce6",
        "g": "e2df9081b54634df",
        "name": "",
        "filename": "newFileName",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1200,
        "y": 600,
        "wires": [
            [
                "1fcaae4c799b6ec1"
            ]
        ]
    },
    {
        "id": "64405a5328ca5afd",
        "type": "link out",
        "z": "663405f12566bce6",
        "g": "e2df9081b54634df",
        "name": "ProcessFileOut",
        "mode": "return",
        "links": [],
        "x": 2095,
        "y": 600,
        "wires": []
    },
    {
        "id": "dad6b43f6743ae15",
        "type": "comment",
        "z": "663405f12566bce6",
        "g": "e2df9081b54634df",
        "name": "File processing: README",
        "info": "This flow processes the file.\n\nIt first renames the file from .dat to .tmp before reading the content \nto make sure the system that is writing the file is not simultaniously \nadding more data to it.",
        "x": 230,
        "y": 540,
        "wires": []
    },
    {
        "id": "1fcaae4c799b6ec1",
        "type": "switch",
        "z": "663405f12566bce6",
        "g": "e2df9081b54634df",
        "name": "message type",
        "property": "filename",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "stop",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "prod",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1420,
        "y": 600,
        "wires": [
            [
                "723924c63e65e76a"
            ],
            [
                "a2efd4a00ee38fb5"
            ]
        ]
    },
    {
        "id": "a2efd4a00ee38fb5",
        "type": "link out",
        "z": "663405f12566bce6",
        "g": "e2df9081b54634df",
        "name": "ProcessFileOut",
        "mode": "return",
        "links": [],
        "x": 1585,
        "y": 640,
        "wires": []
    },
    {
        "id": "a42f67315426e688",
        "type": "comment",
        "z": "663405f12566bce6",
        "g": "e2df9081b54634df",
        "name": "This message type will be implemented later",
        "info": "",
        "x": 1770,
        "y": 640,
        "wires": []
    },
    {
        "id": "4ad5f1d34f19f9f3",
        "type": "switch",
        "z": "663405f12566bce6",
        "g": "e2df9081b54634df",
        "name": "relevant message type?",
        "property": "filename",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "stop",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 510,
        "y": 600,
        "wires": [
            [
                "3b3376bf5bfb8ff9"
            ],
            [
                "f6156060b121eca2"
            ]
        ]
    },
    {
        "id": "f6156060b121eca2",
        "type": "link out",
        "z": "663405f12566bce6",
        "g": "e2df9081b54634df",
        "name": "ProcessFileOut",
        "mode": "return",
        "links": [],
        "x": 715,
        "y": 660,
        "wires": []
    },
    {
        "id": "95ed601e9b7582a4",
        "type": "watch",
        "z": "663405f12566bce6",
        "g": "de0617ba6b2d0a63",
        "name": "Watch folder changes",
        "files": "${FolderToWatch}",
        "recursive": true,
        "x": 220,
        "y": 440,
        "wires": [
            [
                "4447b76fbc16edc7"
            ]
        ]
    },
    {
        "id": "4447b76fbc16edc7",
        "type": "switch",
        "z": "663405f12566bce6",
        "g": "de0617ba6b2d0a63",
        "name": "is update?",
        "property": "event",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "update",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 450,
        "y": 440,
        "wires": [
            [
                "61367d0d269217f8"
            ]
        ]
    },
    {
        "id": "61367d0d269217f8",
        "type": "switch",
        "z": "663405f12566bce6",
        "g": "de0617ba6b2d0a63",
        "name": "is file?",
        "property": "type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "file",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 630,
        "y": 440,
        "wires": [
            [
                "31b930d30898aa25"
            ]
        ]
    },
    {
        "id": "31b930d30898aa25",
        "type": "link call",
        "z": "663405f12566bce6",
        "g": "de0617ba6b2d0a63",
        "name": "ProcessFile",
        "links": [
            "831d3ffb7aab030b"
        ],
        "linkType": "static",
        "timeout": "120",
        "x": 810,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "2bd6924622e32179",
        "type": "comment",
        "z": "663405f12566bce6",
        "g": "de0617ba6b2d0a63",
        "name": "Watch any changes to the folder and trigger the file processing",
        "info": "",
        "x": 350,
        "y": 380,
        "wires": []
    },
    {
        "id": "727a7b74b2a235b6",
        "type": "inject",
        "z": "663405f12566bce6",
        "g": "87236d5bcabd69a0",
        "name": "On start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 180,
        "wires": [
            [
                "ec6410c418d8cbdc"
            ]
        ]
    },
    {
        "id": "ec6410c418d8cbdc",
        "type": "function",
        "z": "663405f12566bce6",
        "g": "87236d5bcabd69a0",
        "name": "Read files in folder",
        "func": "msg.files = fs.readdirSync(env.get(\"FolderToWatch\"), {recursive: true});\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 1,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "fs",
                "module": "fs"
            }
        ],
        "x": 410,
        "y": 180,
        "wires": [
            [
                "3347a719b4a044bc"
            ]
        ]
    },
    {
        "id": "3347a719b4a044bc",
        "type": "loop",
        "z": "663405f12566bce6",
        "g": "87236d5bcabd69a0",
        "name": "For each file",
        "kind": "enum",
        "count": "",
        "initial": "1",
        "step": "1",
        "condition": "",
        "conditionType": "js",
        "when": "before",
        "enumeration": "files",
        "enumerationType": "msg",
        "limit": "",
        "loopPayload": "loop-val",
        "finalPayload": "final-orig",
        "x": 650,
        "y": 180,
        "wires": [
            [],
            [
                "3faec9f706e79632"
            ]
        ]
    },
    {
        "id": "42e394c88481172f",
        "type": "link call",
        "z": "663405f12566bce6",
        "g": "87236d5bcabd69a0",
        "name": "ProcessFile",
        "links": [
            "831d3ffb7aab030b"
        ],
        "linkType": "static",
        "timeout": "120",
        "x": 730,
        "y": 280,
        "wires": [
            [
                "3347a719b4a044bc"
            ]
        ]
    },
    {
        "id": "3faec9f706e79632",
        "type": "function",
        "z": "663405f12566bce6",
        "g": "87236d5bcabd69a0",
        "name": "Set filename",
        "func": "msg.filename = \n    env.get(\"FolderToWatch\") \n    + '\\\\' \n    + msg.payload;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 280,
        "wires": [
            [
                "42e394c88481172f"
            ]
        ]
    },
    {
        "id": "d59b117eadf95155",
        "type": "comment",
        "z": "663405f12566bce6",
        "g": "87236d5bcabd69a0",
        "name": "On startup, check for any newly added files and trigger the processing",
        "info": "",
        "x": 370,
        "y": 120,
        "wires": []
    },
    {
        "id": "c0e9094cb50d99a7",
        "type": "link out",
        "z": "663405f12566bce6",
        "g": "e2df9081b54634df",
        "name": "ProcessFileOut",
        "mode": "return",
        "links": [],
        "x": 415,
        "y": 660,
        "wires": []
    },
    {
        "id": "723924c63e65e76a",
        "type": "subflow:b9112020394e29d0",
        "z": "663405f12566bce6",
        "g": "e2df9081b54634df",
        "name": "",
        "x": 1720,
        "y": 600,
        "wires": [
            [
                "c2b0fd2a3699ada7"
            ]
        ]
    },
    {
        "id": "3b3376bf5bfb8ff9",
        "type": "function",
        "z": "663405f12566bce6",
        "g": "e2df9081b54634df",
        "name": "Set plant",
        "func": "// The plant is the name of the folder \n// in which the file is located\n\nconst subfolders = msg.filename\n    // Remove the folder we are watching from the path\n    .replace(env.get(\"FolderToWatch\"), \"\")\n    // Remove the file itself from the path\n    .replace(msg.file, \"\")\n    //split to get the subfolders\n    .split(\"\\\\\")\n    // And remove empty elements\n    .filter(i => i);\n\n// the plant is the last folder in the subfolder chain.\nmsg.plant = subfolders.pop() || \"\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 600,
        "wires": [
            [
                "460a4e561498714f"
            ]
        ]
    }
]